<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ScaleOut.Streaming.DigitalTwin.Core</name>
    </assembly>
    <members>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.AlertProviderType">
            <summary>
            Holds the different types of Alerting providers supported in the system.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.AlertProviderType.Slack">
            <summary>Send alerts to Slack.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.AlertProviderType.Splunk">
            <summary>Send alerts to Splunk On-Call.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.AlertProviderType.PagerDuty">
            <summary>Send alerts to Pager Duty.</summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.AlertMessage">
            <summary>
            The AlertMessage objects contain all the data to send alerts to external services.
            This includes properties such as title, message and severity. Finally, alerts can include snapshots of instance
            properties along with the message.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.AlertMessage.Title">
            <summary>
            Title of the alert.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.AlertMessage.Severity">
            <summary>
            Severity of the alert. Stored as a string since different providers use different severity names.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.AlertMessage.Message">
            <summary>
            A more descriptive message about the alert.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.AlertMessage.OptionalTwinInstanceProperties">
            <summary>
            Just like events, alerts can include snapshots of instance properties.
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.DelegateSerializationConverter">
            <summary>
            Serializes a dictionary of user defined timer handlers/delegates.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.DelegateSerializationConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Collections.Generic.Dictionary{System.String,Scaleout.Streaming.DigitalTwin.Core.TimerMetadata},System.Boolean,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads serialized JSON stream that represents a dictionary of user defined timer delegates and deserializes it to
            a live dictionary with deserialized timer delegates.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader"/> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="hasExistingValue">The existing value has a value.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>Deserialized dictionary of the user defined timer delegates.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.DelegateSerializationConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Collections.Generic.Dictionary{System.String,Scaleout.Streaming.DigitalTwin.Core.TimerMetadata},Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes the JSON representation of the digital twin internal dictionary that might contain
            user defined timer delegates.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter"/> to write to.</param>
            <param name="value">The timer handler dictionary.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.TimerHandler">
            <summary>
            Digital twin timer delegate. Must be assigned to either a public static method or a 
            class instance method.
            </summary>
            <remarks>
            Each digital twin instance can have up to 5 timers that can be started via the 
            <see cref="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.StartTimer(System.String,System.TimeSpan,Scaleout.Streaming.DigitalTwin.Core.TimerType,Scaleout.Streaming.DigitalTwin.Core.TimerHandler)"/> method call.
            </remarks>
            <param name="timerName">The timer name.</param>
            <param name="context">The digital twin message processing context.</param>
            <param name="instance">The target digital twin object.</param>
            <returns>Return <see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.DoUpdate"/> to indicate that the digital twin
            object data was modified so the digital twin needs to be saved. Return 
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.NoUpdate"/> if the twin object was not modified and does not need to be saved.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase">
            <summary>
            All digital twin objects must be subclassed from this <see cref="T:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase"/> 
            abstract base class to be integrated into the ScaleOut StreamServer message processing pipeline.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.Id">
            <summary>
            Unique digital twin identifier.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.Model">
            <summary>
            Digital twin model type (e.g. "WindTurbine", "TemperatureSensor").
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.Init(System.String,System.String)">
            <summary>
            Override to implement initialization logic for a digital twin instance
            at creation time.
            </summary>
            <param name="id">Digital twin identifier.</param>
            <param name="model">Digital twin model type.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.InitAsync(System.String,System.String)">
            <summary>
            Override to implement initialization logic for a digital twin instance
            at creation time (async version).
            </summary>
            <param name="id">Digital twin identifier.</param>
            <param name="model">Digital twin model type.</param>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.TimerHandlers">
            <summary>
            Collection of digital twin timer handlers.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.NextSimulationTimeUnixMsec">
            <summary>
            The next simulation time.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.InitInternal(System.String,System.String)">
            <summary>
            Initializes <see cref="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.Id"/> and <see cref="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.Model"/>
            properties at the time of object creation.
            </summary>
            <param name="id">Digital twin identifier.</param>
            <param name="model">Digital twin model type.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage">
            <summary>
            Defines a timer message for data exchange between the timer's object 
            expiration handler and the corresponding digital twin instance itself.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.ModelName">
            <summary>
            Target digital twin model name.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.TwinId">
            <summary>
            Target digital twin Id.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.TimerId">
            <summary>
            Timer identifier (from 0 to 4).
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.TimerName">
            <summary>
            Timer name.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.TimerType">
            <summary>
            Timer type.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.ToString">
            <summary>
            The string representation of the <see cref="T:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage"/>.
            </summary>
            <returns>String-formated object representation.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult">
            <summary>
            Specifies whether or not a Digital Twin should be updated after a call to a
            <see cref="M:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor.ProcessMessages(Scaleout.Streaming.DigitalTwin.Core.ProcessingContext,Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase,Scaleout.Streaming.DigitalTwin.Core.IMessageListFactory)"/>
            implementation has returned.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.DoUpdate">
            <summary>
            The digital twin object has been modified and must be updated in the ScaleOut service.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.NoUpdate">
            <summary>
            The digital twin object was not modified and does not need to be updated in the ScaleOut service.
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.SendingResult">
            <summary>
            Indicates the status of a <see cref="M:Scaleout.Streaming.DigitalTwin.Core.IMessageSender.Send(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte[]})"/> 
            operation when sending messages to or from a digital twin object.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled">
            <summary>
            The messages were sent and processed successfully.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled">
            <summary>
            An error occurred while sending or processing messages by a digital twin object or data source.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued">
            <summary>
            The messages were successfully enqueued for delivery.
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.LogSeverity">
            <summary>
            Defines the severity levels for logging messages.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.LogSeverity.Verbose">
            <summary>
            Used for logging of lengthy messages.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.LogSeverity.Informational">
            <summary>
            Indicates that log messages with that level have informational purpose.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.LogSeverity.Warning">
            <summary>
            Indicates that log messages with that level are application warnings.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.LogSeverity.Error">
            <summary>
            Indicates that log messages with that level should be treated as an application error.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.LogSeverity.Critical">
            <summary>
            The message corresponds to a critical error that has caused a major failure that 
            requires immediate attention.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.LogSeverity.None">
            <summary>
            Indicates that log messages with that level should not be stored (e.g. temporarily 
            based on some digital twin configuration setting).
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.TimerType">
            <summary>
            Defines the type of timer that can be created by <see cref="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.StartTimer(System.String,System.TimeSpan,Scaleout.Streaming.DigitalTwin.Core.TimerType,Scaleout.Streaming.DigitalTwin.Core.TimerHandler)"/>.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerType.Recurring">
            <summary>The timer is fired periodically with the specified interval 
            until the <see cref="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.StopTimer(System.String)"/> is called.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerType.OneTime">
            <summary>The timer is fired once after the specified time interval is elapsed.</summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult">
            <summary>
            Defines result codes for timer methods.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.Success">
            <summary>The operation completed successfully.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedTooManyTimers">
            <summary>Failed to start a new timer due to reaching the limit for a number of active timers.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedNoSuchTimer">
            <summary>Failed to stop the existing timer: the timer is no longer active.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedTimerAlreadyExists">
            <summary>Failed to start the timer: the timer with the specified name already exists.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedInternalError">
            <summary>Failed to start/stop timer due to an internal error.</summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinConfigurationException">
            <summary>
            Exception indicating that the configuration of a DigitalTwin model is incorrect.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinConfigurationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinConfigurationException.#ctor(System.String)">
            <summary>
            Creates a DigitalTwinConfigurationException with a message.
            </summary>
            <param name="message">The message associated with this exception.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a DigitalTwinConfigurationException with a message and an inner exception. 
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException">
            <summary>
            Exception indicating that a digital twin is unable to be instantiated by the 
            DigitalTwin service.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException.#ctor(System.String)">
            <summary>
            Creates a DigitalTwinInstantiationException with a message.
            </summary>
            <param name="message">The message associated with this exception</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a DigitalTwinInstantiationException with a message an an inner exception.
            </summary>
            <param name="message">The message associated with this exception</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException">
            <summary>
            Exception that contains an error occured while processing messages by a digital twin.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException.#ctor(System.String)">
            <summary>
            Creates a DigitalTwinProcessingException with a message.
            </summary>
            <param name="message">The message associated with this exception.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a DigitalTwinProcessingException with a message an an inner exception.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ExecutionEnvironmentException">
            <summary>
            Exception indicating that an error occurred when establishing the execution environment.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ExecutionEnvironmentException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ExecutionEnvironmentException.#ctor(System.String)">
            <summary>
            Creates a ExecutionEnvironmentException with a message.
            </summary>
            <param name="message">The message associated with this exception.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ExecutionEnvironmentException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a ExecutionEnvironmentException with a message and an inner exception.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageInstantiationException">
            <summary>
            The MessageInstantiationException is used to detect if a Message is unable to be instantiated by the 
            DigitalTwin service.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageInstantiationException.#ctor">
            <summary>
            Creates a MessageInstantiationException
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageInstantiationException.#ctor(System.String)">
            <summary>
            Creates a MessageInstantiationException with a message.
            </summary>
            <param name="message">the message associated with this exception</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a MessageInstantiationException with a message and inner exception.
            </summary>
            <param name="message">the message associate with this exception</param>
            <param name="innerException">the inner exception</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageProcessorInstantiationException">
            <summary>
            The MessageProcessorInstantiationException is used to detect if a messages processor is unable to be instantiated by the 
            DigitalTwin service.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageProcessorInstantiationException.#ctor">
            <summary>
            Creates a MessageProcessorInstantiationException
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageProcessorInstantiationException.#ctor(System.String)">
            <summary>
            Creates a MessageProcessorInstantiationException with a message.
            </summary>
            <param name="message">The message associated with this exception</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageProcessorInstantiationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a MessageProcessorInstantiationException with a message and an inner exception
            </summary>
            <param name="message">the messages associated with this exception </param>
            <param name="innerException">the inner exception</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            <summary>
            The ModelSimulationException is raised when an error condition 
            encountered while running the model simulation.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException.#ctor(System.String)">
            <summary>
            Creates a ModelSimulationException with a message.
            </summary>
            <param name="message">The message associated with this exception.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a ModelSimulationException with a message and an inner exception.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">
            <summary>
            An exception thrown by persistence providers.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException.#ctor(System.String)">
            <summary>
            Creates a <see cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException"/> with a message.
            </summary>
            <param name="message">The message associated with this exception.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException.#ctor(System.String,System.Exception)">
            <summary>
            Creates a <see cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException"/> with a message and 
            an inner exception.
            </summary>
            <param name="message">The message associated with this exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint">
            <summary>
            Interface for use by client applications that send messages to digital twin instances.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.Send(System.String,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sends JSON serialized messages to a digital twin instance.
            </summary>
            <param name="digitalTwinId">ID of the digital twin instance.</param>
            <param name="messages">Enumerable collection of serialized messages.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> if the message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.Send(System.String,System.Byte[])">
            <summary>
            Sends a JSON serialized message to a digital twin instance.
            </summary>
            <param name="digitalTwinId">ID of the digital twin instance.</param>
            <param name="message">Serialized message.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> if the message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.Send(System.String,System.String)">
            <summary>
            Sends a JSON serialized message to a digital twin instance.
            </summary>
            <param name="digitalTwinId">ID of the digital twin instance.</param>
            <param name="message">Serialized message.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> if the message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.Send(System.String,System.Object)">
            <summary>
            Sends a message to a digital twin instance.
            </summary>
            <param name="digitalTwinId">ID of the digital twin instance.</param>
            <param name="message">Message instance.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> if the message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.Send(System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends messages to a digital twin instance.
            </summary>
            <param name="digitalTwinId">ID of the digital twin instance.</param>
            <param name="message">Messages to send to the instance.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> if the message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.CreateTwin(System.String,System.Object)">
            <summary>
            Creates a new digital twin instance.
            </summary>
            <param name="digitalTwinId">ID of the digital twin instance.</param>
            <param name="digitalTwin">Digital twin instance to create. It could an object of a real
            digital twin model type or simply an anonymous object with a set of digital twin model's 
            properties and their initial values.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> if the message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.CreateTwinFromPersistenceStore(System.String,System.Object)">
            <summary>
            Create a new digital twin instance . This method first tries to create 
            a new twin instance from a persistence store if it is enabled. If a persistence store is not enabled or
            if the twin instance is not found there, the property values of the specified fallback 
            <paramref name="defaultValue"/> are used to create and initialize a new twin instance.
            </summary>
            <param name="digitalTwinId">Digital twin identifier.</param>
            <param name="defaultValue">Digital twin instance to create. It could an object of a real
            digital twin model type or simply an anonymous object with a set of digital twin model's 
            properties and their initial values.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method throws DigitalTwinInstantiationException with the error details.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.CreateTwinFromPersistenceStore(System.String)">
            <summary>
            Create a new digital twin instance in the ScaleOut data grid. This method assumes that persistence store is 
            enabled for the target model and the twin instance with the specified <paramref name="digitalTwinId"/> 
            exists there. In this case, a new twin instance is created and initialized from the persistence store.
            Otherwise, the <see cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException"/>
            is thrown.
            </summary>
            <param name="digitalTwinId">Digital twin identifier.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method throws DigitalTwinInstantiationException with the error details.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.DeleteTwin(System.String)">
            <summary>
            Delete a digital twin instance from the ScaleOut data grid.
            </summary>
            <param name="digitalTwinId">Digital twin identifier.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method throws DigitalTwinProcessingException with the error details.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.IMessageListFactory">
            <summary>
            Creates collection of new messages received by a digital twin object.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IMessageListFactory.GetIncomingMessageList``1">
            <summary>
            Returns an enumerable collection of new (incoming) messages as
            <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TMessage">User defined message/event class type.</typeparam>
            <returns>Collection of new messages to process.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.IMessageSender">
            <summary>
            Interface that must be implemented by a message sender class for sending
            messages/events to a digital twin.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.IMessageSender.SourceAppId">
            <summary>
            Application namespace used to identify the message source (i.e., a data source connector or a digital twin object).
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IMessageSender.Send(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sends serialized messages to a digital twin object located in the data grid or
            IoT device that a digital twin represents.
            </summary>
            <param name="digitalTwinId">Digital twin identifier.</param>
            <param name="messageInfo">JSON-encoded message info specifying the data source Id, target, and source digital twin model types.</param>
            <param name="messages">The list of serialized JSON-encoded event messages to send.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> when message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IMessageSender.Send(System.String,System.String,System.Byte[])">
            <summary>
            Sends a serialized message to a digital twin object located in the data grid or
            IoT device that a digital twin represents.
            </summary>
            <param name="digitalTwinId">Digital twin identifier.</param>
            <param name="messageInfo">JSON-encoded message info specifying the data source Id, target, and source digital twin model types.</param>
            <param name="message">The serialized JSON-encoded event message to send.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> when message was successfully sent,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType">
            <summary>
            List of supported persistence providers.
            </summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.Unspecified">
            <summary>Unspecified (when model does not use any persistence provider).</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.AzureDigitalTwinsService">
            <summary>Azure Digital Twins.</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.AzureBlobStorage">
            <summary>Azure Blob Storage service (future release).</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.SQLServer">
            <summary>SQL Server</summary>
        </member>
        <member name="F:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.SQLite">
            <summary>SQLite</summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider">
            <summary>
            Encapsulates the capabilities of a ScaleOut real-time digital twin 
            persistence provider.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.ProviderType">
            <summary>Returns <see cref="T:Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType"/> identifier.</summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.IsActive">
            <summary>
            Indicates whether the persistence provider is active and can be used.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetInstanceIdsAsync(System.String)">
            <summary>Returns the list of object identifiers that are part of the specified <paramref name="containerName"/>. 
            For the Azure Digital Twins service it is a list of digital twin instance identifiers, for the Azure Blob storage it could be 
            a list of Blob names. For the relational database providers it is a list of table's primary keys.</summary>
            <param name="containerName">The name of the persistence container.</param>
            <returns>The list of object identifiers that are located in the specified <paramref name="containerName"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="containerName"/> is empty or null.</exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">Failed to obtain the list of object instance identifiers
            for the specified <paramref name="containerName"/>.</exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetInstanceIds(System.String)">
            <summary>Returns the list of object identifiers that are part of the specified <paramref name="containerName"/>. 
            For the Azure Digital Twins service it is a list of digital twin instance identifiers, for the Azure Blob storage it could be 
            a list of Blob names. For the relational database providers it is a list of table's primary keys.</summary>
            <param name="containerName">The name of the persistence container.</param>
            <returns>The list of object identifiers that are located in the specified <paramref name="containerName"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="containerName"/> is empty or null.</exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">Failed to obtain the list of object instance identifiers
            for the specified <paramref name="containerName"/>.</exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetInstance(System.String,System.String)">
            <summary>Returns a JSON-serialized object's <paramref name="instanceId"/> 
            that is part of the specified <paramref name="containerName"/></summary>
            <param name="containerName">The name of the persistence container.</param>
            <param name="instanceId">Persistence object's instance Id.</param>
            <returns>The JSON-formatted content of the object's object's <paramref name="instanceId"/> 
            that is located in the specified <paramref name="containerName"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="containerName"/> or <paramref name="instanceId"/> is empty or null.</exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">Failed to obtain the object instance
            for the specified <paramref name="containerName"/>.</exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetInstanceAsync(System.String,System.String)">
            <summary>Returns a JSON-serialized object's <paramref name="instanceId"/> 
            that is part of the specified <paramref name="containerName"/></summary>
            <param name="containerName">The name of the persistence container.</param>
            <param name="instanceId">Persistence object's instance Id.</param>
            <returns>The JSON-formatted content of the object's object's <paramref name="instanceId"/> 
            that is located in the specified <paramref name="containerName"/>.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="containerName"/> or <paramref name="instanceId"/> is empty or null.</exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">Failed to obtain the object instance
            for the specified <paramref name="containerName"/>.</exception>       
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetPropertyListAsync(System.String)">
            <summary>Returns the properties on a persistence object. For the Azure Digital Twins service
            it is a list of digital twin's properties, for the Azure Blob storage it is a list of Blob's properties,
            and for the relational database providers it is a list of table's columns.</summary>
            <param name="containerName">The name of the persistence container.</param>
            <returns>List of object's properties.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="containerName"/> is empty or null.</exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">Failed to build the list of properties
            for the specified <paramref name="containerName"/>.</exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetPropertyList(System.String)">
            <summary>Returns the properties on a persistence object. For the Azure Digital Twins service
            it is a list of digital twin's properties, for the Azure Blob storage it is a list of Blob's properties,
            and for the relational database providers it is a list of table's columns.</summary>
            <param name="containerName">The name of the persistence container.</param>
            <returns>List of object's properties.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="containerName"/> is empty or null.</exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException">Failed to build the list of properties
            for the specified <paramref name="containerName"/>.</exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.UpdatePropertyAsync``1(System.String,System.String,System.String,``0)">
            <summary>
            Updates a property value on a specified persistence object, 
            given an <paramref name="instanceId"/> and <paramref name="containerName"/>.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="containerName">Name of the persistence container.</param>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">Property's new value.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.UpdateProperty``1(System.String,System.String,System.String,``0)">
            <summary>
            Updates a property value on a specified persistence object, 
            given an <paramref name="instanceId"/> and <paramref name="containerName"/>.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="containerName">Name of the persistence container.</param>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">Property's new value.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.UpdateRTDTPropertyAsync``1(System.String,System.String,``0)">
            <summary>
            Updates a property value of a persistence object that is part of 
            a ScaleOut definition in the context of current real-time digital twin (RTDT) model.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">Property's new value.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.UpdateRTDTProperty``1(System.String,System.String,``0)">
            <summary>
            Updates a property value of a persistence object that is part of 
            a ScaleOut definition in the context of current real-time digital twin (RTDT) model.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="propertyValue">Property's new value.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetPropertyAsync``1(System.String,System.String,System.String)">
            <summary>
            Gets a property value on the specified persistence object located
            in the <paramref name="containerName"/> container.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="containerName">Name of the persistence container.</param>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The current property's value.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetProperty``1(System.String,System.String,System.String)">
            <summary>
            Gets a property value on the specified persistence object located
            in the <paramref name="containerName"/> container.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="containerName">Name of the persistence container.</param>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The current property's value.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetRTDTPropertyAsync``1(System.String,System.String)">
            <summary>
            Gets a property value on the specified persistence object <paramref name="instanceId"/> that is part of 
            a ScaleOut component definition in the context of current real-time digital twin (RTDT) model.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The current property's value.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.GetRTDTProperty``1(System.String,System.String)">
            <summary>
            Gets a property value on the specified persistence object <paramref name="instanceId"/> that is part of 
            a ScaleOut component definition in the context of current real-time digital twin (RTDT) model.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="instanceId">Persistence object's instance Id.</param>
            <param name="propertyName">Name of the property.</param>
            <returns>The current property's value.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.ISimulationController">
            <summary>
            The methods of this interface allow user to control all aspects of 
            digital twin's model simulation process.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.GetSimulationTimeIncrement">
            <summary>
            Get a simulation time increment.
            </summary>
            <returns><see cref="T:System.TimeSpan"/> for the simulation time increment.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.Delay(System.TimeSpan)">
            <summary>
            Delays the wake-up for the current instance for the specified <paramref name="delay"/>.
            </summary>
            <param name="delay"><see cref="T:System.TimeSpan"/> for simulation time delay.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method returns <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/>.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.EmitTelemetry(System.String,System.Byte[])">
            <summary>
            Sends a telemetry message to the corresponding real-time digital twin instance. 
            The twin ids for both, sending digital twin in a simulation model and the receiving twin 
            in the real-time model are the same.
            </summary>
            <param name="modelName">Real-time digital twin model name.</param>
            <param name="message">The JSON-serialized message to send.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method returns <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/>.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException">
            An error occurred while processing the message by digital twin.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.EmitTelemetry(System.String,System.Object)">
            <summary>
            Sends a telemetry message to the corresponding real-time digital twin instance. 
            The twin ids for both, sending digital twin in a simulation model and the receiving twin 
            in the real-time model are the same.
            </summary>
            <param name="modelName">Real-time digital twin model name.</param>
            <param name="message">The message to serialize and send.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method returns <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/>.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException">
            An error occurred while processing the message by digital twin.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.CreateTwin(System.String,System.String,System.Object)">
            <summary>
            Create a new digital twin instance of the specified simulation <paramref name="modelName"/>.
            This method forces to use the specified object instance over the one that could be found
            in the persistence store if it is enabled.
            </summary>
            <param name="modelName">Digital twin model name.</param>
            <param name="twinId">Digital twin identifier.</param>
            <param name="newInstance">Digital twin instance to create. It could be an object of a real
            digital twin model type or simply an anonymous object with a set of digital twin model's 
            properties and their initial values.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method returns <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/>.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException">
            An error occurred while creating a new digital twin instance.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.CreateTwinFromPersistenceStore(System.String,System.String,System.Object)">
            <summary>
            Create a new digital twin instance of the specified simulation <paramref name="modelName"/>.
            This method first tries to create a new twin instance from a persistence store if it is enabled.
            If a persistence store is not enabled or if the twin instance is not found there, then the property values 
            of the specified fallback <paramref name="defaultInstance"/> are used to create and initialize a new twin instance.
            </summary>
            <param name="modelName">Digital twin model name.</param>
            <param name="twinId">Digital twin identifier.</param>
            <param name="defaultInstance">Digital twin instance to create. It could an object of a real
            digital twin model type or simply an anonymous object with a set of digital twin model's 
            properties and their initial values.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method throws DigitalTwinInstantiationException with the error details.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException">
            An error occurred while creating a new digital twin instance.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.CreateTwinFromPersistenceStore(System.String,System.String)">
            <summary>
            Create a new digital twin instance of the specified simulation <paramref name="modelName"/>.
            This method assumes that persistence store is enabled for the <paramref name="modelName"/> and 
            twin instance with the specified <paramref name="twinId"/> exists there. In this case,
            a new twin instance is created and initialized from the persistence store.
            </summary>
            <param name="modelName">Digital twin model name.</param>
            <param name="twinId">Digital twin identifier.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method throws DigitalTwinInstantiationException with the error details.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException">
            An error occurred while creating a new digital twin instance.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.DeleteTwin(System.String,System.String)">
            <summary>
            Delete a digital twin instance of the specified simulation <paramref name="modelName"/>.
            </summary>
            <param name="modelName">Digital twin model name.</param>
            <param name="twinId">Digital twin identifier.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method returns <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/>.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.DeleteThisTwin">
            <summary>
            Delete this simulation twin instance (itself).
            </summary>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Handled"/> in case of success, otherwise 
            the method returns <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/>.</returns>
            <exception cref="T:Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException">
            The exception is thrown if the current digital twin model does not support simulation.
            </exception>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ISimulationController.StopSimulation">
            <summary>
            Stop the currently running simulation.
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor`2">
            <summary>
            Abstract base class that must be subclassed to implement the message processor which
            processes incoming messages for a digital twin object.
            </summary>
            <typeparam name="TDigitalTwin">User-defined type for a digital twin object.</typeparam>
            <typeparam name="TMessage">User-defined type for incoming messages.</typeparam>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor`2.ProcessMessages(Scaleout.Streaming.DigitalTwin.Core.ProcessingContext,`0,System.Collections.Generic.IEnumerable{`1})">
            <summary>
            This method is called by ScaleOut StreamServer to pass new messages
            to the specified digital twin object.
            </summary>
            <param name="context">The digital twin message processing context.</param>
            <param name="digitalTwin">The target digital twin object.</param>
            <param name="newMessages">New messages to process.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.DoUpdate"/> when the digital twin
            object and the list of processed messages need to be updated and <see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.NoUpdate"/> when
            no updates are needed.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor`2.ProcessMessages(Scaleout.Streaming.DigitalTwin.Core.ProcessingContext,Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase,Scaleout.Streaming.DigitalTwin.Core.IMessageListFactory)">
            <summary>
            Internal method called by ScaleOut Digital Twin library for passing 
            the digital twin (state) object together with lists of processed and new messages
            (type of <typeref name="TMessage"/>) into a user-defined message processor class.
            </summary>
            <param name="context">The digital twin message processing context.</param>
            <param name="digitalTwin">The target digital twin object.</param>
            <param name="messageListFactory">The message list factory which generates message lists of a user-defined type.
            <typeref name="TMessage"/>.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.DoUpdate"/> when digital twin
            object and the list of processed messages need to be updated and <see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.NoUpdate"/> when
            no updates are needed.</returns>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor`2.DigitalTwinModelType">
            <inheritdoc/>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor`2.MessageType">
            <inheritdoc/>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor">
            <summary>
            The top level abstract base class used by ScaleOut Digital Twin Library.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor.DigitalTwinModelType">
            <summary>
            Gets the user-defined type for a digital twin model associated with this
            MessageProcessor.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.MessageProcessor.MessageType">
            <summary>
            Gets the user-defined type for a messages that are handled by this
            MessageProcessor.
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext">
            <summary>
            Message processing context for currently processing messages.
            It allows sending messages back to a data source where the messages 
            are originated from.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.DataSourceId">
            <summary>
            Data source unique identifier, e.g. for IoT use case it is typically device Id,
            which is also used as a digital twin Id.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.DigitalTwinModel">
            <summary>
            Digital twin model type.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToDataSource(System.Byte[])">
            <summary>
            Sends a message back to a data source origination point (e.g. IoT device). When sending 
            a message to the ScaleOut Messaging REST service as a data source, the message content
            must be JSON encoded.
            </summary>
            <param name="message">JSON encoded message as <see cref="T:byte[]" />.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when message was successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToDataSource(System.Object)">
            <summary>
            Sends a message back to a data source origination point (e.g. IoT device). When sending 
            a message to the ScaleOut Messaging REST service as a data source, the message content
            must be JSON encoded.
            </summary>
            <param name="message">Message object to be encoded as JSON.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when message was successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToDataSource(System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sends a list of messages back to a data source origination point (e.g. IoT device).
            When sending messages to the ScaleOut Messaging REST service as a data source, each message
            must be JSON encoded.
            </summary>
            <param name="messages">JSON encoded messages as a list of <see cref="T:byte[]" />.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when messages were successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToDataSource(System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends a list of messages back to a data source origination point (e.g. IoT device).
            When sending messages to the ScaleOut Messaging REST service as a data source, each message
            must be JSON encoded.
            </summary>
            <param name="messages">Message object to be encoded as JSON.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when messages were successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToTwin(System.String,System.String,System.Byte[])">
            <summary>
            Sends message to a different digital twin in twin's hierarchy.
            </summary>
            <param name="targetTwinModel">Digital twin model type.</param>
            <param name="targetTwinId">Digital twin identifier.</param>
            <param name="message">JSON encoded message as <see cref="T:byte[]" />.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when message was successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToTwin(System.String,System.String,System.Object)">
            <summary>
            Sends message to a different digital twin in twin's hierarchy.
            </summary>
            <param name="targetTwinModel">Digital twin model type.</param>
            <param name="targetTwinId">Digital twin identifier.</param>
            <param name="message">Message object to be encoded as JSON.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when message was successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToTwin(System.String,System.String,System.Collections.Generic.IEnumerable{System.Byte[]})">
            <summary>
            Sends a list of messages to a different digital twin in twin's hierarchy.
            </summary>
            <param name="targetTwinModel">Digital twin model type.</param>
            <param name="targetTwinId">Digital twin identifier.</param>
            <param name="messages">JSON encoded messages as a list of <see cref="T:byte[]" />.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when messages were successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendToTwin(System.String,System.String,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
            Sends a list of messages to a different digital twin in twin's hierarchy.
            </summary>
            <param name="targetTwinModel">Digital twin model type.</param>
            <param name="targetTwinId">Digital twin identifier.</param>
            <param name="messages">Messages to be encoded as JSON.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.Enqueued"/> when messages were successfully enqueued,
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.SendingResult.NotHandled"/> otherwise.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.LogMessage(Scaleout.Streaming.DigitalTwin.Core.LogSeverity,System.String)">
            <summary>
            Logs user message with the specified severity level.
            </summary>
            <param name="severity">The severity level for the specified message.</param>
            <param name="message">The user message to log.</param>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SendAlert(System.String,Scaleout.Streaming.DigitalTwin.Core.AlertMessage)">
            <summary>
            Sends an alert to a given Alerting provider. 
            </summary>
            <param name="providerName">The name of the configuration of an Alerting Provider to send the alert to.</param>
            <param name="alertMessage">The provided object contains information about the alert data, as well as the provider to target.</param>
            <returns></returns>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.PersistenceProvider">
            <summary>
            Returns the reference to registered persistence provider the model is using.
            The name of the registered persistence provider should be specified in the model's
            appsettings.json file via the PersistenceProvider key. Only Azure Digital Twins Service 
            provider is supported.
            </summary>
            <returns>The registered <see cref="T:Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider"/> used by the model.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.StartTimer(System.String,System.TimeSpan,Scaleout.Streaming.DigitalTwin.Core.TimerType,Scaleout.Streaming.DigitalTwin.Core.TimerHandler)">
            <summary>
            Starts a new timer for the digital twin <see cref="P:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.DataSourceId"/>.
            </summary>
            <param name="timerName">The timer name.</param>
            <param name="interval">The timer interval.</param>
            <param name="type">The type of the timer.</param>
            <param name="timerCallback">A delegate representing a user-defined timer callback static method to be executed.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.Success"/> if the timer was started successfully, otherwise one of the following 
            error codes is returned: <see cref="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedTooManyTimers"/> when the maximum number of timers is reached or 
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedInternalError"/> if an error occurred during the method call.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.StopTimer(System.String)">
            <summary>
            Stops the specified timer.
            </summary>
            <param name="timerName">The timer name.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.Success"/> if the timer was stopped successfully, otherwise one of the following 
            error codes is returned: <see cref="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedNoSuchTimer"/> when the specified timer was not found or 
            <see cref="F:Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.FailedInternalError"/> if an error occurred during the method call.</returns>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.SimulationController">
            <summary>
            Returns the <see cref="T:Scaleout.Streaming.DigitalTwin.Core.ISimulationController"/> interface to control
            all aspects of model simulation.
            </summary>
            <returns>Get the <see cref="T:Scaleout.Streaming.DigitalTwin.Core.ISimulationController"/> interface.</returns>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.GetCurrentTime">
            <summary>
            Returns the current time in UTC. If model simulation is active the method
            returns the current simulation time, otherwise it returns the current UTC
            time.
            </summary>
            <returns>The current time - either the current system time or the current
            simulation time if simulation process is active.</returns>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor`1">
            <summary>
            Abstract base class for logic that gets triggered for every time interval in a simulation.
            </summary>
            <typeparam name="TDigitalTwin">User-defined type for a digital twin object.</typeparam>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor`1.ProcessModel(Scaleout.Streaming.DigitalTwin.Core.ProcessingContext,`0,System.DateTimeOffset)">
            <summary>
            The method called by the ScaleOut service every time the simulation time 
            interval has elapsed.
            </summary>
            <param name="context">Digital twin model processing context.</param>
            <param name="digitalTwin">Targeted digital twin instance.</param>
            <param name="currentTime">The current simulation time.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.DoUpdate"/> if the digital twin
            object needs to be updated, or <see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.NoUpdate"/> if
            no updates are needed.</returns>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor`1.SimulationInterval">
            <inheritdoc/>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor">
            <summary>
            Abstract base class used by ScaleOut Digital Twin Library infrastructure.
            </summary>
        </member>
        <member name="M:Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor.ProcessModel(Scaleout.Streaming.DigitalTwin.Core.ProcessingContext,Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase,System.DateTimeOffset)">
            <summary>
            The method called by the ScaleOut service every time the simulation time 
            interval has elapsed.
            </summary>
            <param name="context">Digital twin model processing context.</param>
            <param name="digitalTwin">Targeted digital twin instance.</param>
            <param name="currentTime">The current simulation time.</param>
            <returns><see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.DoUpdate"/> if the digital twin
            object needs to be updated, or <see cref="F:Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.NoUpdate"/> if
            no updates are needed.</returns>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor.SimulationInterval">
            <summary>
            The simulated time interval.
            </summary>
        </member>
        <member name="T:Scaleout.Streaming.DigitalTwin.Core.TimerMetadata">
            <summary>
            Used by the <see cref="T:Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase"/> class to store
            information about a timer associated with a Digital Twin instance.
            </summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.TimerMetadata.Id">
            <summary>The timer Id.</summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.TimerMetadata.Interval">
            <summary>The timer interval.</summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.TimerMetadata.Type">
            <summary>The timer type.</summary>
        </member>
        <member name="P:Scaleout.Streaming.DigitalTwin.Core.TimerMetadata.TimerHandler">
            <summary>The timer handler. Only assign a public static method or 
            a class instance method to this property.</summary>
        </member>
    </members>
</doc>
