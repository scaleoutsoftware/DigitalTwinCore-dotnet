{
  "api/Scaleout.DigitalTwin.Workbench.PostedAlert.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.PostedAlert.html",
    "title": "Class PostedAlert | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class PostedAlert Namespace Scaleout.DigitalTwin.Workbench Assembly Scaleout.DigitalTwin.Workbench.dll An alert that was sent from a MessageProcessor using SendAlert(string, AlertMessage). public class PostedAlert Inheritance object PostedAlert Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AlertMessage The message sent to the alert provider. public AlertMessage AlertMessage { get; } Property Value AlertMessage AlertProviderName Alert provider's name. public string AlertProviderName { get; } Property Value string"
  },
  "api/Scaleout.DigitalTwin.Workbench.RealTimeWorkbench.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.RealTimeWorkbench.html",
    "title": "Class RealTimeWorkbench | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class RealTimeWorkbench Namespace Scaleout.DigitalTwin.Workbench Assembly Scaleout.DigitalTwin.Workbench.dll Workbench for real-time digital twin development. public class RealTimeWorkbench : IDisposable Inheritance object RealTimeWorkbench Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors RealTimeWorkbench(ILogger?) Constructor public RealTimeWorkbench(ILogger? logger = null) Parameters logger ILogger ILogger instance, or null. Properties AnomalyDetectionProviders Keeps track of Anomaly Detection Providers for each digital twin model. In order to add providers, use the extension method AddAnomalyDetectionProvider in the Scaleout.DigitalTwin.Workbench.MachineLearning Nuget package. public Dictionary<string, Dictionary<string, IAnomalyDetectionProvider>> AnomalyDetectionProviders { get; set; } Property Value Dictionary<string, Dictionary<string, IAnomalyDetectionProvider>> PostedAlerts Gets a list of alerts that were issued from message processors. public IReadOnlyList<PostedAlert> PostedAlerts { get; } Property Value IReadOnlyList<PostedAlert> SharedGlobalData Gets an ISharedData instance for accessing objects that are shared globally between all models in this workbench instance. public ISharedData SharedGlobalData { get; } Property Value ISharedData Methods AddRealTimeModel<TDigitalTwin, TMessage>(string, MessageProcessor<TDigitalTwin, TMessage>) Adds a real-time model (with a message processor) to the workbench. The returned endpoint can be used to send messages to instances in the model. public IDigitalTwinModelEndpoint AddRealTimeModel<TDigitalTwin, TMessage>(string modelName, MessageProcessor<TDigitalTwin, TMessage> processor) where TDigitalTwin : DigitalTwinBase, new() Parameters modelName string Name of the model. processor MessageProcessor<TDigitalTwin, TMessage> The model's MessageProcessor<TDigitalTwin, TMessage> implementation. Returns IDigitalTwinModelEndpoint IDigitalTwinModelEndpoint that can be used to send messages to an instance of the model. Type Parameters TDigitalTwin Type of digital twin model (derived from DigitalTwinBase). TMessage Type of message sent to the model's message processor. Exceptions ArgumentNullException The provided message processor was null. ArgumentException The model name is invalid (null or whitespace). ArgumentException A model with the same name already exists in this workbench. CreateConsoleLogger() Creates a console logger for use in the RealTimeWorkbench constructor. public static ILogger CreateConsoleLogger() Returns ILogger ILogger instance that writes to the console. Dispose() Frees resources associated with the workbench environment and stops any timers associated with twins in the environmwent. public void Dispose() Dispose(bool) When overridden in a derived class, releases the unmanaged resources used by the environment, and optionally releases the managed resources. protected virtual void Dispose(bool disposing) Parameters disposing bool Indicates whether the method call comes from a Dispose method (its value is true) or from a finalizer (its value is false). GetInstances<TDigitalTwin>(string) Gets a read-only dictionary of all digital twin instances in a model. public IReadOnlyDictionary<string, TDigitalTwin> GetInstances<TDigitalTwin>(string modelName) where TDigitalTwin : DigitalTwinBase Parameters modelName string Name of the model associated with the instances. Returns IReadOnlyDictionary<string, TDigitalTwin> A read-only dictionary of digital twin instances, keyed by ID. Type Parameters TDigitalTwin Type of digital twin instance stored in the simulation workbench. Exceptions InvalidOperationException The specified model was not registered. GetSharedModelData(string) Gets an ISharedData instance for accessing objects that are shared between the instances of the specified model. public ISharedData GetSharedModelData(string modelName) Parameters modelName string Name of the model associated with the shared data. Returns ISharedData An ISharedData instance that can be used to access shared objects. Exceptions InvalidOperationException The specified model has not been registered with the workbench. OnDataSourceMessageReceived(SendToDataSourceEventArgs) Raises the DataSourceMessageReceived event. protected virtual void OnDataSourceMessageReceived(SendToDataSourceEventArgs e) Parameters e SendToDataSourceEventArgs Event arguments containing information about the message sent back to the data source. Events DataSourceMessageReceived Event raised when a message processor implementation sends a message back to its data source using SendToDataSource(object). public event EventHandler<SendToDataSourceEventArgs>? DataSourceMessageReceived Event Type EventHandler<SendToDataSourceEventArgs>"
  },
  "api/Scaleout.DigitalTwin.Workbench.SendToDataSourceEventArgs.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.SendToDataSourceEventArgs.html",
    "title": "Class SendToDataSourceEventArgs | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class SendToDataSourceEventArgs Namespace Scaleout.DigitalTwin.Workbench Assembly Scaleout.DigitalTwin.Workbench.dll public class SendToDataSourceEventArgs : EventArgs Inheritance object EventArgs SendToDataSourceEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DigitalTwinId ID of the digital twin instance. public string DigitalTwinId { get; set; } Property Value string Message Message sent to the digital twin's data source. public object Message { get; set; } Property Value object ModelName Name of the model. public string ModelName { get; set; } Property Value string"
  },
  "api/Scaleout.DigitalTwin.Workbench.SimulationStatus.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.SimulationStatus.html",
    "title": "Enum SimulationStatus | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum SimulationStatus Namespace Scaleout.DigitalTwin.Workbench Assembly Scaleout.DigitalTwin.Workbench.dll Represents the status of a simulation running under a SimulationWorkbench instance. public enum SimulationStatus Fields EndTimeReached = 3 The simulation has stopped because the simulated time has reached the endTime that was specified at simulation initialization. NoRemainingWork = 2 The simulation has stopped because there are no digital twins participating in the simulation. Running = 0 The simulation is running, and additional time steps remain. StopRequested = 1 The simulation has stopped because a ProcessModel implementation called StopSimulation()."
  },
  "api/Scaleout.DigitalTwin.Workbench.SimulationWorkbench.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.SimulationWorkbench.html",
    "title": "Class SimulationWorkbench | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class SimulationWorkbench Namespace Scaleout.DigitalTwin.Workbench Assembly Scaleout.DigitalTwin.Workbench.dll Workbench for simulation development. public class SimulationWorkbench Inheritance object SimulationWorkbench Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationWorkbench(ILogger?) Constructor public SimulationWorkbench(ILogger? logger = null) Parameters logger ILogger ILogger instance. Properties CurrentTime Gets the CurrentTime of a running simulation. public DateTimeOffset CurrentTime { get; } Property Value DateTimeOffset Exceptions InvalidOperationException A simulation is not running, or a simulation has been initialized but has not yet stepped into a time step. SharedGlobalData Gets an ISharedData instance for accessing objects that are shared globally between all models in the simulation. public ISharedData SharedGlobalData { get; } Property Value ISharedData Methods AddInstance(string, string, DigitalTwinBase) Adds a digital twin instance to a model that has been registered with this workbench. public void AddInstance(string instanceId, string modelName, DigitalTwinBase instance) Parameters instanceId string ID of the instance being added. modelName string Name of a model that has been registered with this workbench instance using AddSimulationModel<TDigitalTwin>(string, SimulationProcessor<TDigitalTwin>) or AddRealTimeModel<TDigitalTwin, TMessage>(string, MessageProcessor<TDigitalTwin, TMessage>). instance DigitalTwinBase The digital twin instance. Exceptions InvalidOperationException The provided modelName has not been registered as a simulation or realtime model. InvalidOperationException The instance cannot be added because the simulation was already started (using InitializeSimulation() or RunSimulation()). AddRealTimeModel<TDigitalTwin, TMessage>(string, MessageProcessor<TDigitalTwin, TMessage>) Adds a real-time model (with a message processor) to the workbench. public void AddRealTimeModel<TDigitalTwin, TMessage>(string modelName, MessageProcessor<TDigitalTwin, TMessage> processor) where TDigitalTwin : DigitalTwinBase, new() Parameters modelName string Name of the model. processor MessageProcessor<TDigitalTwin, TMessage> The model's MessageProcessor<TDigitalTwin, TMessage> implementation. Type Parameters TDigitalTwin Type of digital twin model (derived from DigitalTwinBase). TMessage Type of message sent to the model's message processor. Exceptions ArgumentNullException The provided message processor was null. ArgumentException The model name is invalid (null or whitespace). ArgumentException A model with the same name already exists in this workbench. InvalidOperationException A model cannot be added after a simulation has been started (using InitializeSimulation() or RunSimulation()). AddSimulationModel<TDigitalTwin>(string, SimulationProcessor<TDigitalTwin>) Adds a simulation model (with a simulation processor) to the workbench. public void AddSimulationModel<TDigitalTwin>(string modelName, SimulationProcessor<TDigitalTwin> processor) where TDigitalTwin : DigitalTwinBase, new() Parameters modelName string Name of the model. processor SimulationProcessor<TDigitalTwin> The model's SimulationProcessor<TDigitalTwin> implementation. Type Parameters TDigitalTwin Type of digital twin model (derived from DigitalTwinBase). Exceptions ArgumentNullException The provided simulation processor was null. ArgumentException The model name is invalid (null or whitespace). ArgumentException A model with the same name already exists in this workbench. InvalidOperationException A model cannot be added after a simulation has been started (using InitializeSimulation() or RunSimulation()). AddSimulationModel<TDigitalTwin, TMessage>(string, SimulationProcessor<TDigitalTwin>, MessageProcessor<TDigitalTwin, TMessage>) Adds a simulation model (with both a simulation processor and a message processor) to the workbench. public void AddSimulationModel<TDigitalTwin, TMessage>(string modelName, SimulationProcessor<TDigitalTwin> simulationProcessor, MessageProcessor<TDigitalTwin, TMessage> messageProcessor) where TDigitalTwin : DigitalTwinBase, new() Parameters modelName string Name of the model. simulationProcessor SimulationProcessor<TDigitalTwin> The model's SimulationProcessor<TDigitalTwin> implementation. messageProcessor MessageProcessor<TDigitalTwin, TMessage> The model's MessageProcessor<TDigitalTwin, TMessage> implementation. Type Parameters TDigitalTwin Type of digital twin model (derived from DigitalTwinBase). TMessage Type of message sent to the model's message processor. Exceptions ArgumentNullException The provided simulation processor or message processor was null. ArgumentException The model name is invalid (null or whitespace). ArgumentException A model with the same name already exists in this workbench. InvalidOperationException A model cannot be added after a simulation has been started (using InitializeSimulation() or RunSimulation()). CreateConsoleLogger() Creates a console logger for use in the SimulationWorkbench constructor. public static ILogger CreateConsoleLogger() Returns ILogger ILogger instance that writes to the console. GetInstance<TDigitalTwin>(string, string) Gets a specified instance. public TDigitalTwin? GetInstance<TDigitalTwin>(string modelName, string instanceId) where TDigitalTwin : DigitalTwinBase Parameters modelName string Name of the model associated with the instance. instanceId string ID of the instance. Returns TDigitalTwin Digital twin instance, or null if the instance was not found Type Parameters TDigitalTwin Type of instance to retrieve. Exceptions InvalidOperationException The specified model was not registered. GetInstances<TDigitalTwin>(string) Gets a read-only dictionary of all digital twin instances in a model. public IReadOnlyDictionary<string, TDigitalTwin> GetInstances<TDigitalTwin>(string modelName) where TDigitalTwin : DigitalTwinBase Parameters modelName string Name of the model associated with the instances. Returns IReadOnlyDictionary<string, TDigitalTwin> A read-only dictionary of digital twin instances, keyed by ID. Type Parameters TDigitalTwin Type of digital twin instance stored in the simulation workbench. Exceptions InvalidOperationException The specified model was not registered. GetSharedModelData(string) Gets an ISharedData instance for accessing objects that are shared between the instances of the specified model. public ISharedData GetSharedModelData(string modelName) Parameters modelName string Name of the model associated with the shared data. Returns ISharedData An ISharedData instance that can be used to access shared objects. Exceptions InvalidOperationException The specified model has not been registered with the workbench. InitializeSimulation(DateTimeOffset, DateTimeOffset, TimeSpan) Initializes a simulation so it can be manully stepped through simulation using the Step() method. public void InitializeSimulation(DateTimeOffset startTime, DateTimeOffset endTime, TimeSpan simulationIterationInterval) Parameters startTime DateTimeOffset Simulated time of the first time step. endTime DateTimeOffset End time (exclusive) for the simulation. Pass MaxValue to run the simulation indefinitely. simulationIterationInterval TimeSpan Simulation interval. PeekNextTimeStep() Gets next time step in the current simulation. public DateTimeOffset PeekNextTimeStep() Returns DateTimeOffset Time of the next simulation step, or DateTimeOffset.MaxValue if the simulation is about to end because there is no remaining work. Exceptions InvalidOperationException A simulation is not running, or a simulation has been initialized but has not yet stepped into a time step RunSimulation(DateTimeOffset, DateTimeOffset, TimeSpan, TimeSpan) Runs a simulation to completion. public StepResult RunSimulation(DateTimeOffset startTime, DateTimeOffset endTime, TimeSpan simulationIterationInterval, TimeSpan delayBetweenTimesteps) Parameters startTime DateTimeOffset Simulation start time (inclusive). endTime DateTimeOffset Simulation end time (exclusive). simulationIterationInterval TimeSpan Simulated time between steps in the simulation. delayBetweenTimesteps TimeSpan Sleep time between simulation time steps. Returns StepResult StepResult containing the final status of the completed simulation. Step() Executes events for the next time step. public StepResult Step() Returns StepResult StepResult containing the status and time of the next step in the simulation."
  },
  "api/Scaleout.DigitalTwin.Workbench.StepResult.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.StepResult.html",
    "title": "Struct StepResult | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Struct StepResult Namespace Scaleout.DigitalTwin.Workbench Assembly Scaleout.DigitalTwin.Workbench.dll Execution result of a simulation time step. public readonly struct StepResult Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties NextSimulationTime The time of the next step in the simulation. (Equivalent to PeekNextTimeStep()). public DateTimeOffset NextSimulationTime { get; } Property Value DateTimeOffset Remarks At simulation completion, this property's value will vary depending on the final SimulationStatus. Final SimulationStatus NextSimulationTime value StopRequested The next time step in the simulation that would have occurred if the simulation had not ended. NoRemainingWork MaxValue EndTimeReached The next time step in the simulation that would have occurred if the simulation had not ended. SimulationStatus The status of the simulation after the time step completes. public SimulationStatus SimulationStatus { get; } Property Value SimulationStatus"
  },
  "api/Scaleout.DigitalTwin.Workbench.html": {
    "href": "api/Scaleout.DigitalTwin.Workbench.html",
    "title": "Namespace Scaleout.DigitalTwin.Workbench | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Namespace Scaleout.DigitalTwin.Workbench Classes PostedAlert An alert that was sent from a MessageProcessor using SendAlert(string, AlertMessage). RealTimeWorkbench Workbench for real-time digital twin development. SendToDataSourceEventArgs SimulationWorkbench Workbench for simulation development. Structs StepResult Execution result of a simulation time step. Enums SimulationStatus Represents the status of a simulation running under a SimulationWorkbench instance."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.AlertMessage.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.AlertMessage.html",
    "title": "Class AlertMessage | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class AlertMessage Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll The AlertMessage objects contain all the data to send alerts to external services. This includes properties such as title, message and severity. Finally, alerts can include snapshots of instance properties along with the message. public class AlertMessage Inheritance object AlertMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Message A more descriptive message about the alert. public string Message { get; set; } Property Value string OptionalTwinInstanceProperties Just like events, alerts can include snapshots of instance properties. public Dictionary<string, string> OptionalTwinInstanceProperties { get; set; } Property Value Dictionary<string, string> Severity Severity of the alert. Stored as a string since different providers use different severity names. public string Severity { get; set; } Property Value string Title Title of the alert. public string Title { get; set; } Property Value string"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.AlertProviderType.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.AlertProviderType.html",
    "title": "Class AlertProviderType | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class AlertProviderType Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Holds the different types of Alerting providers supported in the system. public static class AlertProviderType Inheritance object AlertProviderType Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields PagerDuty Send alerts to Pager Duty. public const string PagerDuty = \"PagerDuty\" Field Value string Slack Send alerts to Slack. public const string Slack = \"Slack\" Field Value string Splunk Send alerts to Splunk On-Call. public const string Splunk = \"Splunk\" Field Value string"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.CacheOperationStatus.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.CacheOperationStatus.html",
    "title": "Enum CacheOperationStatus | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum CacheOperationStatus Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll An enumeration that indicates the outcome of a cache operation. public enum CacheOperationStatus Fields CacheCleared = 4 The cache was cleared successfully. ObjectDoesNotExist = 2 The object could not be retrieved because it was not found. ObjectPut = 1 The object was successfully added/updated. ObjectRemoved = 3 The object was removed successfully. ObjectRetrieved = 0 The object was successfully retrieved."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.DelegateSerializationConverter.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.DelegateSerializationConverter.html",
    "title": "Class DelegateSerializationConverter | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class DelegateSerializationConverter Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Serializes a dictionary of user defined timer handlers/delegates. public class DelegateSerializationConverter : JsonConverter<Dictionary<string, TimerMetadata>> Inheritance object JsonConverter JsonConverter<Dictionary<string, TimerMetadata>> DelegateSerializationConverter Inherited Members JsonConverter<Dictionary<string, TimerMetadata>>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<Dictionary<string, TimerMetadata>>.WriteJson(JsonWriter, Dictionary<string, TimerMetadata>, JsonSerializer) JsonConverter<Dictionary<string, TimerMetadata>>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<Dictionary<string, TimerMetadata>>.ReadJson(JsonReader, Type, Dictionary<string, TimerMetadata>, bool, JsonSerializer) JsonConverter<Dictionary<string, TimerMetadata>>.CanConvert(Type) JsonConverter.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadJson(JsonReader, Type, Dictionary<string, TimerMetadata>, bool, JsonSerializer) Reads serialized JSON stream that represents a dictionary of user defined timer delegates and deserializes it to a live dictionary with deserialized timer delegates. public override Dictionary<string, TimerMetadata> ReadJson(JsonReader reader, Type objectType, Dictionary<string, TimerMetadata> existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue Dictionary<string, TimerMetadata> The existing value of object being read. hasExistingValue bool The existing value has a value. serializer JsonSerializer The calling serializer. Returns Dictionary<string, TimerMetadata> Deserialized dictionary of the user defined timer delegates. WriteJson(JsonWriter, Dictionary<string, TimerMetadata>, JsonSerializer) Writes the JSON representation of the digital twin internal dictionary that might contain user defined timer delegates. public override void WriteJson(JsonWriter writer, Dictionary<string, TimerMetadata> value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value Dictionary<string, TimerMetadata> The timer handler dictionary. serializer JsonSerializer The calling serializer."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.DigitalTwinBase.html",
    "title": "Class DigitalTwinBase | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class DigitalTwinBase Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll All digital twin objects must be subclassed from this DigitalTwinBase abstract base class to be integrated into the ScaleOut StreamServer message processing pipeline. public abstract class DigitalTwinBase Inheritance object DigitalTwinBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id Unique digital twin identifier. public string Id { get; set; } Property Value string Model Digital twin model type (e.g. \"WindTurbine\", \"TemperatureSensor\"). public string Model { get; set; } Property Value string Methods Init(string, string) Override to implement initialization logic for a digital twin instance at creation time. public virtual void Init(string id, string model) Parameters id string Digital twin identifier. model string Digital twin model type. Init(string, string, InitContext) Override to implement initialization logic for a digital twin instance at creation time. public virtual void Init(string id, string model, InitContext initContext) Parameters id string Digital twin identifier. model string Digital twin model type. initContext InitContext Context object providing operations that are available when a digital twin instance is being created. InitAsync(string, string) Override to implement initialization logic for a digital twin instance at creation time (async version). public virtual Task InitAsync(string id, string model) Parameters id string Digital twin identifier. model string Digital twin model type. Returns Task InitAsync(string, string, InitContext) Override to implement initialization logic for a digital twin instance at creation time (async version). public virtual Task InitAsync(string id, string model, InitContext initContext) Parameters id string Digital twin identifier. model string Digital twin model type. initContext InitContext Context object providing operations that are available when a digital twin instance is being created. Returns Task"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.DigitalTwinTimerMessage.html",
    "title": "Class DigitalTwinTimerMessage | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class DigitalTwinTimerMessage Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Defines a timer message for data exchange between the timer's object expiration handler and the corresponding digital twin instance itself. public class DigitalTwinTimerMessage Inheritance object DigitalTwinTimerMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Properties ModelName Target digital twin model name. public string ModelName { get; set; } Property Value string TimerId Timer identifier (from 0 to 4). public int TimerId { get; set; } Property Value int TimerName Timer name. public string TimerName { get; set; } Property Value string TimerType Timer type. public TimerType TimerType { get; set; } Property Value TimerType TwinId Target digital twin Id. public string TwinId { get; set; } Property Value string Methods ToString() The string representation of the DigitalTwinTimerMessage. public override string ToString() Returns string String-formated object representation."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinConfigurationException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinConfigurationException.html",
    "title": "Class DigitalTwinConfigurationException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class DigitalTwinConfigurationException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Exception indicating that the configuration of a DigitalTwin model is incorrect. public class DigitalTwinConfigurationException : ExecutionEnvironmentException, ISerializable Inheritance object Exception ExecutionEnvironmentException DigitalTwinConfigurationException Implements ISerializable Derived DigitalTwinInstantiationException MessageInstantiationException MessageProcessorInstantiationException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DigitalTwinConfigurationException() Constructor. public DigitalTwinConfigurationException() DigitalTwinConfigurationException(string) Creates a DigitalTwinConfigurationException with a message. public DigitalTwinConfigurationException(string message) Parameters message string The message associated with this exception. DigitalTwinConfigurationException(string, Exception) Creates a DigitalTwinConfigurationException with a message and an inner exception. public DigitalTwinConfigurationException(string message, Exception innerException) Parameters message string The message associated with this exception. innerException Exception The inner exception."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinInstantiationException.html",
    "title": "Class DigitalTwinInstantiationException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class DigitalTwinInstantiationException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Exception indicating that a digital twin is unable to be instantiated by the DigitalTwin service. public class DigitalTwinInstantiationException : DigitalTwinConfigurationException, ISerializable Inheritance object Exception ExecutionEnvironmentException DigitalTwinConfigurationException DigitalTwinInstantiationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DigitalTwinInstantiationException() Constructor. public DigitalTwinInstantiationException() DigitalTwinInstantiationException(string) Creates a DigitalTwinInstantiationException with a message. public DigitalTwinInstantiationException(string message) Parameters message string The message associated with this exception DigitalTwinInstantiationException(string, Exception) Creates a DigitalTwinInstantiationException with a message an an inner exception. public DigitalTwinInstantiationException(string message, Exception innerException) Parameters message string The message associated with this exception innerException Exception The inner exception"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.DigitalTwinProcessingException.html",
    "title": "Class DigitalTwinProcessingException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class DigitalTwinProcessingException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Exception that contains an error occured while processing messages by a digital twin. public class DigitalTwinProcessingException : ExecutionEnvironmentException, ISerializable Inheritance object Exception ExecutionEnvironmentException DigitalTwinProcessingException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors DigitalTwinProcessingException() Constructor. public DigitalTwinProcessingException() DigitalTwinProcessingException(string) Creates a DigitalTwinProcessingException with a message. public DigitalTwinProcessingException(string message) Parameters message string The message associated with this exception. DigitalTwinProcessingException(string, Exception) Creates a DigitalTwinProcessingException with a message an an inner exception. public DigitalTwinProcessingException(string message, Exception innerException) Parameters message string The message associated with this exception. innerException Exception The inner exception."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.ExecutionEnvironmentException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.ExecutionEnvironmentException.html",
    "title": "Class ExecutionEnvironmentException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class ExecutionEnvironmentException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Exception indicating that an error occurred when establishing the execution environment. public class ExecutionEnvironmentException : Exception, ISerializable Inheritance object Exception ExecutionEnvironmentException Implements ISerializable Derived DigitalTwinConfigurationException DigitalTwinProcessingException Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ExecutionEnvironmentException() Constructor. public ExecutionEnvironmentException() ExecutionEnvironmentException(string) Creates a ExecutionEnvironmentException with a message. public ExecutionEnvironmentException(string message) Parameters message string The message associated with this exception. ExecutionEnvironmentException(string, Exception) Creates a ExecutionEnvironmentException with a message and an inner exception. public ExecutionEnvironmentException(string message, Exception innerException) Parameters message string The message associated with this exception. innerException Exception The inner exception."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageInstantiationException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageInstantiationException.html",
    "title": "Class MessageInstantiationException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class MessageInstantiationException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll The MessageInstantiationException is used to detect if a Message is unable to be instantiated by the DigitalTwin service. public class MessageInstantiationException : DigitalTwinConfigurationException, ISerializable Inheritance object Exception ExecutionEnvironmentException DigitalTwinConfigurationException MessageInstantiationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MessageInstantiationException() Creates a MessageInstantiationException public MessageInstantiationException() MessageInstantiationException(string) Creates a MessageInstantiationException with a message. public MessageInstantiationException(string message) Parameters message string the message associated with this exception MessageInstantiationException(string, Exception) Creates a MessageInstantiationException with a message and inner exception. public MessageInstantiationException(string message, Exception innerException) Parameters message string the message associate with this exception innerException Exception the inner exception"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageProcessorInstantiationException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.MessageProcessorInstantiationException.html",
    "title": "Class MessageProcessorInstantiationException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class MessageProcessorInstantiationException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll The MessageProcessorInstantiationException is used to detect if a messages processor is unable to be instantiated by the DigitalTwin service. public class MessageProcessorInstantiationException : DigitalTwinConfigurationException, ISerializable Inheritance object Exception ExecutionEnvironmentException DigitalTwinConfigurationException MessageProcessorInstantiationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors MessageProcessorInstantiationException() Creates a MessageProcessorInstantiationException public MessageProcessorInstantiationException() MessageProcessorInstantiationException(string) Creates a MessageProcessorInstantiationException with a message. public MessageProcessorInstantiationException(string message) Parameters message string The message associated with this exception MessageProcessorInstantiationException(string, Exception) Creates a MessageProcessorInstantiationException with a message and an inner exception public MessageProcessorInstantiationException(string message, Exception innerException) Parameters message string the messages associated with this exception innerException Exception the inner exception"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.ModelSimulationException.html",
    "title": "Class ModelSimulationException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class ModelSimulationException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll The ModelSimulationException is raised when an error condition encountered while running the model simulation. public class ModelSimulationException : Exception, ISerializable Inheritance object Exception ModelSimulationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors ModelSimulationException() Public constructor. public ModelSimulationException() ModelSimulationException(string) Creates a ModelSimulationException with a message. public ModelSimulationException(string message) Parameters message string The message associated with this exception. ModelSimulationException(string, Exception) Creates a ModelSimulationException with a message and an inner exception. public ModelSimulationException(string message, Exception innerException) Parameters message string The message associated with this exception. innerException Exception The inner exception."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.PersistenceProviderException.html",
    "title": "Class PersistenceProviderException | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class PersistenceProviderException Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Assembly ScaleOut.Streaming.DigitalTwin.Core.dll An exception thrown by persistence providers. public class PersistenceProviderException : Exception, ISerializable Inheritance object Exception PersistenceProviderException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors PersistenceProviderException() Constructor. public PersistenceProviderException() PersistenceProviderException(string) Creates a PersistenceProviderException with a message. public PersistenceProviderException(string message) Parameters message string The message associated with this exception. PersistenceProviderException(string, Exception) Creates a PersistenceProviderException with a message and an inner exception. public PersistenceProviderException(string message, Exception innerException) Parameters message string The message associated with this exception. innerException Exception The inner exception."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.Exceptions.html",
    "title": "Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Namespace Scaleout.Streaming.DigitalTwin.Core.Exceptions Classes DigitalTwinConfigurationException Exception indicating that the configuration of a DigitalTwin model is incorrect. DigitalTwinInstantiationException Exception indicating that a digital twin is unable to be instantiated by the DigitalTwin service. DigitalTwinProcessingException Exception that contains an error occured while processing messages by a digital twin. ExecutionEnvironmentException Exception indicating that an error occurred when establishing the execution environment. MessageInstantiationException The MessageInstantiationException is used to detect if a Message is unable to be instantiated by the DigitalTwin service. MessageProcessorInstantiationException The MessageProcessorInstantiationException is used to detect if a messages processor is unable to be instantiated by the DigitalTwin service. ModelSimulationException The ModelSimulationException is raised when an error condition encountered while running the model simulation. PersistenceProviderException An exception thrown by persistence providers."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.IAnomalyDetectionProvider.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.IAnomalyDetectionProvider.html",
    "title": "Interface IAnomalyDetectionProvider | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface IAnomalyDetectionProvider Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Encapsulates the capabilities of a ScaleOut real-time digital twin anomaly detection provider (based on ML.NET libraries). public interface IAnomalyDetectionProvider Methods DetectAnomaly(Dictionary<string, float>) Detects anomalies by using the trained algorithm and the provided property values bool DetectAnomaly(Dictionary<string, float> properties) Parameters properties Dictionary<string, float> A dictionary of the properties to use for the prediction Returns bool True if an anomaly is detected, False otherwise"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.ICacheResult.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.ICacheResult.html",
    "title": "Interface ICacheResult | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface ICacheResult Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Represents a response from an ISharedData operation. public interface ICacheResult Properties Key Gets the key to the object associated with the result. string Key { get; } Property Value string Status Gets the outcome of the cache operation. CacheOperationStatus Status { get; } Property Value CacheOperationStatus Value Get the object returned from a Get operation. byte[] Value { get; } Property Value byte[]"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.IDigitalTwinModelEndpoint.html",
    "title": "Interface IDigitalTwinModelEndpoint | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface IDigitalTwinModelEndpoint Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Interface for use by client applications that send messages to digital twin instances. public interface IDigitalTwinModelEndpoint Properties SharedGlobalData Gets an ISharedData instance for accessing objects that are shared globally between all models. ISharedData SharedGlobalData { get; } Property Value ISharedData SharedModelData Gets an ISharedData instance for accessing shared objects that are associated with the endpoint's model. ISharedData SharedModelData { get; } Property Value ISharedData Methods CreateTwin(string, object) Creates a new digital twin instance. SendingResult CreateTwin(string digitalTwinId, object digitalTwin) Parameters digitalTwinId string ID of the digital twin instance. digitalTwin object Digital twin instance to create. It could an object of a real digital twin model type or simply an anonymous object with a set of digital twin model's properties and their initial values. Returns SendingResult Handled if the message was successfully sent, NotHandled otherwise. CreateTwinFromPersistenceStore(string) Create a new digital twin instance in the ScaleOut data grid. This method assumes that persistence store is enabled for the target model and the twin instance with the specified digitalTwinId exists there. In this case, a new twin instance is created and initialized from the persistence store. Otherwise, the DigitalTwinInstantiationException is thrown. SendingResult CreateTwinFromPersistenceStore(string digitalTwinId) Parameters digitalTwinId string Digital twin identifier. Returns SendingResult Handled in case of success, otherwise the method throws DigitalTwinInstantiationException with the error details. CreateTwinFromPersistenceStore(string, object) Create a new digital twin instance . This method first tries to create a new twin instance from a persistence store if it is enabled. If a persistence store is not enabled or if the twin instance is not found there, the property values of the specified fallback defaultValue are used to create and initialize a new twin instance. SendingResult CreateTwinFromPersistenceStore(string digitalTwinId, object defaultValue) Parameters digitalTwinId string Digital twin identifier. defaultValue object Digital twin instance to create. It could an object of a real digital twin model type or simply an anonymous object with a set of digital twin model's properties and their initial values. Returns SendingResult Handled in case of success, otherwise the method throws DigitalTwinInstantiationException with the error details. DeleteTwin(string) Delete a digital twin instance from the ScaleOut data grid. SendingResult DeleteTwin(string digitalTwinId) Parameters digitalTwinId string Digital twin identifier. Returns SendingResult Handled in case of success, otherwise the method throws DigitalTwinProcessingException with the error details. Send(string, byte[]) Sends a JSON serialized message to a digital twin instance. SendingResult Send(string digitalTwinId, byte[] message) Parameters digitalTwinId string ID of the digital twin instance. message byte[] Serialized message. Returns SendingResult Handled if the message was successfully sent, NotHandled otherwise. Send(string, IEnumerable<byte[]>) Sends JSON serialized messages to a digital twin instance. SendingResult Send(string digitalTwinId, IEnumerable<byte[]> messages) Parameters digitalTwinId string ID of the digital twin instance. messages IEnumerable<byte[]> Enumerable collection of serialized messages. Returns SendingResult Handled if the message was successfully sent, NotHandled otherwise. Send(string, IEnumerable<object>) Sends messages to a digital twin instance. SendingResult Send(string digitalTwinId, IEnumerable<object> message) Parameters digitalTwinId string ID of the digital twin instance. message IEnumerable<object> Messages to send to the instance. Returns SendingResult Handled if the message was successfully sent, NotHandled otherwise. Send(string, object) Sends a message to a digital twin instance. SendingResult Send(string digitalTwinId, object message) Parameters digitalTwinId string ID of the digital twin instance. message object Message instance. Returns SendingResult Handled if the message was successfully sent, NotHandled otherwise. Send(string, string) Sends a JSON serialized message to a digital twin instance. SendingResult Send(string digitalTwinId, string message) Parameters digitalTwinId string ID of the digital twin instance. message string Serialized message. Returns SendingResult Handled if the message was successfully sent, NotHandled otherwise."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.IMessageListFactory.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.IMessageListFactory.html",
    "title": "Interface IMessageListFactory | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface IMessageListFactory Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Creates collection of new messages received by a digital twin object. public interface IMessageListFactory Methods GetIncomingMessageList<TMessage>() Returns an enumerable collection of new (incoming) messages as IEnumerable<T>. IEnumerable<TMessage> GetIncomingMessageList<TMessage>() Returns IEnumerable<TMessage> Collection of new messages to process. Type Parameters TMessage User defined message/event class type."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.IMessageSender.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.IMessageSender.html",
    "title": "Interface IMessageSender | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface IMessageSender Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Interface that must be implemented by a message sender class for sending messages/events to a digital twin. public interface IMessageSender Properties SourceAppId Application namespace used to identify the message source (i.e., a data source connector or a digital twin object). uint SourceAppId { get; } Property Value uint Methods Send(string, string, byte[]) Sends a serialized message to a digital twin object located in the data grid or IoT device that a digital twin represents. SendingResult Send(string digitalTwinId, string messageInfo, byte[] message) Parameters digitalTwinId string Digital twin identifier. messageInfo string JSON-encoded message info specifying the data source Id, target, and source digital twin model types. message byte[] The serialized JSON-encoded event message to send. Returns SendingResult Handled when message was successfully sent, NotHandled otherwise. Send(string, string, IEnumerable<byte[]>) Sends serialized messages to a digital twin object located in the data grid or IoT device that a digital twin represents. SendingResult Send(string digitalTwinId, string messageInfo, IEnumerable<byte[]> messages) Parameters digitalTwinId string Digital twin identifier. messageInfo string JSON-encoded message info specifying the data source Id, target, and source digital twin model types. messages IEnumerable<byte[]> The list of serialized JSON-encoded event messages to send. Returns SendingResult Handled when message was successfully sent, NotHandled otherwise."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.IPersistenceProvider.html",
    "title": "Interface IPersistenceProvider | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface IPersistenceProvider Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Encapsulates the capabilities of a ScaleOut real-time digital twin persistence provider. public interface IPersistenceProvider Properties IsActive Indicates whether the persistence provider is active and can be used. bool IsActive { get; } Property Value bool ProviderType Returns PersistenceProviderType identifier. PersistenceProviderType ProviderType { get; } Property Value PersistenceProviderType Methods GetInstance(string, string) Returns a JSON-serialized object's instanceId that is part of the specified containerName string GetInstance(string containerName, string instanceId) Parameters containerName string The name of the persistence container. instanceId string Persistence object's instance Id. Returns string The JSON-formatted content of the object's object's instanceId that is located in the specified containerName. Exceptions ArgumentNullException containerName or instanceId is empty or null. PersistenceProviderException Failed to obtain the object instance for the specified containerName. GetInstanceAsync(string, string) Returns a JSON-serialized object's instanceId that is part of the specified containerName Task<string> GetInstanceAsync(string containerName, string instanceId) Parameters containerName string The name of the persistence container. instanceId string Persistence object's instance Id. Returns Task<string> The JSON-formatted content of the object's object's instanceId that is located in the specified containerName. Exceptions ArgumentNullException containerName or instanceId is empty or null. PersistenceProviderException Failed to obtain the object instance for the specified containerName. GetInstanceIds(string) Returns the list of object identifiers that are part of the specified containerName. For the Azure Digital Twins service it is a list of digital twin instance identifiers, for the Azure Blob storage it could be a list of Blob names. For the relational database providers it is a list of table's primary keys. List<string> GetInstanceIds(string containerName) Parameters containerName string The name of the persistence container. Returns List<string> The list of object identifiers that are located in the specified containerName. Exceptions ArgumentNullException containerName is empty or null. PersistenceProviderException Failed to obtain the list of object instance identifiers for the specified containerName. GetInstanceIdsAsync(string) Returns the list of object identifiers that are part of the specified containerName. For the Azure Digital Twins service it is a list of digital twin instance identifiers, for the Azure Blob storage it could be a list of Blob names. For the relational database providers it is a list of table's primary keys. Task<List<string>> GetInstanceIdsAsync(string containerName) Parameters containerName string The name of the persistence container. Returns Task<List<string>> The list of object identifiers that are located in the specified containerName. Exceptions ArgumentNullException containerName is empty or null. PersistenceProviderException Failed to obtain the list of object instance identifiers for the specified containerName. GetPropertyAsync<T>(string, string, string) Gets a property value on the specified persistence object located in the containerName container. Task<T> GetPropertyAsync<T>(string containerName, string instanceId, string propertyName) Parameters containerName string Name of the persistence container. instanceId string Persistence object's instance Id. propertyName string Name of the property. Returns Task<T> The current property's value. Type Parameters T Type of the property. GetPropertyList(string) Returns the properties on a persistence object. For the Azure Digital Twins service it is a list of digital twin's properties, for the Azure Blob storage it is a list of Blob's properties, and for the relational database providers it is a list of table's columns. IEnumerable<(string propertyName, string propertyType)> GetPropertyList(string containerName) Parameters containerName string The name of the persistence container. Returns IEnumerable<(string propertyName, string propertyType)> List of object's properties. Exceptions ArgumentNullException containerName is empty or null. PersistenceProviderException Failed to build the list of properties for the specified containerName. GetPropertyListAsync(string) Returns the properties on a persistence object. For the Azure Digital Twins service it is a list of digital twin's properties, for the Azure Blob storage it is a list of Blob's properties, and for the relational database providers it is a list of table's columns. Task<IEnumerable<(string propertyName, string propertyType)>> GetPropertyListAsync(string containerName) Parameters containerName string The name of the persistence container. Returns Task<IEnumerable<(string propertyName, string propertyType)>> List of object's properties. Exceptions ArgumentNullException containerName is empty or null. PersistenceProviderException Failed to build the list of properties for the specified containerName. GetProperty<T>(string, string, string) Gets a property value on the specified persistence object located in the containerName container. T GetProperty<T>(string containerName, string instanceId, string propertyName) Parameters containerName string Name of the persistence container. instanceId string Persistence object's instance Id. propertyName string Name of the property. Returns T The current property's value. Type Parameters T Type of the property. GetRTDTPropertyAsync<T>(string, string) Gets a property value on the specified persistence object instanceId that is part of a ScaleOut component definition in the context of current real-time digital twin (RTDT) model. Task<T> GetRTDTPropertyAsync<T>(string instanceId, string propertyName) Parameters instanceId string Persistence object's instance Id. propertyName string Name of the property. Returns Task<T> The current property's value. Type Parameters T Type of the property. GetRTDTProperty<T>(string, string) Gets a property value on the specified persistence object instanceId that is part of a ScaleOut component definition in the context of current real-time digital twin (RTDT) model. T GetRTDTProperty<T>(string instanceId, string propertyName) Parameters instanceId string Persistence object's instance Id. propertyName string Name of the property. Returns T The current property's value. Type Parameters T Type of the property. UpdatePropertyAsync<T>(string, string, string, T) Updates a property value on a specified persistence object, given an instanceId and containerName. Task UpdatePropertyAsync<T>(string containerName, string instanceId, string propertyName, T propertyValue) Parameters containerName string Name of the persistence container. instanceId string Persistence object's instance Id. propertyName string Name of the property. propertyValue T Property's new value. Returns Task Type Parameters T Type of the property. UpdateProperty<T>(string, string, string, T) Updates a property value on a specified persistence object, given an instanceId and containerName. void UpdateProperty<T>(string containerName, string instanceId, string propertyName, T propertyValue) Parameters containerName string Name of the persistence container. instanceId string Persistence object's instance Id. propertyName string Name of the property. propertyValue T Property's new value. Type Parameters T Type of the property. UpdateRTDTPropertyAsync<T>(string, string, T) Updates a property value of a persistence object that is part of a ScaleOut definition in the context of current real-time digital twin (RTDT) model. Task UpdateRTDTPropertyAsync<T>(string instanceId, string propertyName, T propertyValue) Parameters instanceId string Persistence object's instance Id. propertyName string Name of the property. propertyValue T Property's new value. Returns Task Type Parameters T Type of the property. UpdateRTDTProperty<T>(string, string, T) Updates a property value of a persistence object that is part of a ScaleOut definition in the context of current real-time digital twin (RTDT) model. void UpdateRTDTProperty<T>(string instanceId, string propertyName, T propertyValue) Parameters instanceId string Persistence object's instance Id. propertyName string Name of the property. propertyValue T Property's new value. Type Parameters T Type of the property."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.ISharedData.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.ISharedData.html",
    "title": "Interface ISharedData | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface ISharedData Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Provides access to objects that are shared between model instances. public interface ISharedData Methods Clear() Clears all objects from the cache. ICacheResult Clear() Returns ICacheResult ICacheResult containing the outcome of the operation. Remarks The Status property of the returned result will contain the following CacheOperationStatus: Status Description CacheCleared The shared data repository was successfully cleared. Get(string) Retrieves an existing object from the cache. ICacheResult Get(string key) Parameters key string Identifier of the object in the cache. Returns ICacheResult ICacheResult containing the outcome of the operation and the retrieved object (if successful). Remarks The Status property of the returned result will contain one of the following CacheOperationStatus outcomes: Status Description ObjectRetrieved The object was successfully retrieved. ObjectDoesNotExist The requested object was not found. Put(string, byte[]) Adds or updates an object in the cache. ICacheResult Put(string key, byte[] value) Parameters key string Identifier of the object in the cache. value byte[] Value to be stored in the cache. Returns ICacheResult ICacheResult containing the outcome of the operation. Remarks The Status property of the returned result will contain the following CacheOperationStatus: Status Description ObjectPut The object was successfully put into the shared data repository. Remove(string) Removes an object from the cache. ICacheResult Remove(string key) Parameters key string Identifier of the object in the cache. Returns ICacheResult ICacheResult containing the outcome of the operation. Remarks The Status property of the returned result will contain the following CacheOperationStatus: Status Description ObjectRemoved The object was successfully removed from the shared data repository."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.ISimulationController.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.ISimulationController.html",
    "title": "Interface ISimulationController | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Interface ISimulationController Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll The methods of this interface allow user to control all aspects of digital twin's model simulation process. public interface ISimulationController Methods CreateTwin(string, string, object) Create a new digital twin instance of the specified simulation modelName. This method forces to use the specified object instance over the one that could be found in the persistence store if it is enabled. SendingResult CreateTwin(string modelName, string twinId, object newInstance) Parameters modelName string Digital twin model name. twinId string Digital twin identifier. newInstance object Digital twin instance to create. It could be an object of a real digital twin model type or simply an anonymous object with a set of digital twin model's properties and their initial values. Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DigitalTwinInstantiationException An error occurred while creating a new digital twin instance. CreateTwinFromPersistenceStore(string, string) Create a new digital twin instance of the specified simulation modelName. This method assumes that persistence store is enabled for the modelName and twin instance with the specified twinId exists there. In this case, a new twin instance is created and initialized from the persistence store. SendingResult CreateTwinFromPersistenceStore(string modelName, string twinId) Parameters modelName string Digital twin model name. twinId string Digital twin identifier. Returns SendingResult Handled in case of success, otherwise the method throws DigitalTwinInstantiationException with the error details. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DigitalTwinInstantiationException An error occurred while creating a new digital twin instance. CreateTwinFromPersistenceStore(string, string, object) Create a new digital twin instance of the specified simulation modelName. This method first tries to create a new twin instance from a persistence store if it is enabled. If a persistence store is not enabled or if the twin instance is not found there, then the property values of the specified fallback defaultInstance are used to create and initialize a new twin instance. SendingResult CreateTwinFromPersistenceStore(string modelName, string twinId, object defaultInstance) Parameters modelName string Digital twin model name. twinId string Digital twin identifier. defaultInstance object Digital twin instance to create. It could an object of a real digital twin model type or simply an anonymous object with a set of digital twin model's properties and their initial values. Returns SendingResult Handled in case of success, otherwise the method throws DigitalTwinInstantiationException with the error details. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DigitalTwinInstantiationException An error occurred while creating a new digital twin instance. Delay(TimeSpan) Delays the wake-up for the current instance for the specified delay. SendingResult Delay(TimeSpan delay) Parameters delay TimeSpan TimeSpan for simulation time delay. Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DelayIndefinitely() Delays calling the ProcessModel(ProcessingContext, TDigitalTwin, DateTimeOffset) method for this instance forever. Users can interrupt this infinite delay later by calling RunThisTwin() for this instance within the ProcessMessages(ProcessingContext, TDigitalTwin, IEnumerable<TMessage>) method call. SendingResult DelayIndefinitely() Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DeleteThisTwin() Delete this simulation twin instance (itself). SendingResult DeleteThisTwin() Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DeleteTwin(string, string) Delete a digital twin instance of the specified simulation modelName. SendingResult DeleteTwin(string modelName, string twinId) Parameters modelName string Digital twin model name. twinId string Digital twin identifier. Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. EmitTelemetry(string, byte[]) Sends a telemetry message to the corresponding real-time digital twin instance. The twin ids for both, sending digital twin in a simulation model and the receiving twin in the real-time model are the same. SendingResult EmitTelemetry(string modelName, byte[] message) Parameters modelName string Real-time digital twin model name. message byte[] The JSON-serialized message to send. Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DigitalTwinProcessingException An error occurred while processing the message by digital twin. EmitTelemetry(string, object) Sends a telemetry message to the corresponding real-time digital twin instance. The twin ids for both, sending digital twin in a simulation model and the receiving twin in the real-time model are the same. SendingResult EmitTelemetry(string modelName, object message) Parameters modelName string Real-time digital twin model name. message object The message to serialize and send. Returns SendingResult Handled in case of success, otherwise the method returns NotHandled. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. DigitalTwinProcessingException An error occurred while processing the message by digital twin. GetSimulationTimeIncrement() Get a simulation time increment. TimeSpan GetSimulationTimeIncrement() Returns TimeSpan TimeSpan for the simulation time increment. Exceptions ModelSimulationException The exception is thrown if the current digital twin model does not support simulation. RunThisTwin() Adds this simulation twin instance (itself) to the end of the priority queue for running the ProcessModel(ProcessingContext, TDigitalTwin, DateTimeOffset) method for it at the current simulation time. void RunThisTwin() StopSimulation() Stop the currently running simulation. void StopSimulation()"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.InitContext.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.InitContext.html",
    "title": "Class InitContext | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class InitContext Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Context object that provides operations that are available when a digital twin instance is being created. public abstract class InitContext Inheritance object InitContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties SharedGlobalData Gets an ISharedData instance for accessing objects that are shared globally between all models. public abstract ISharedData SharedGlobalData { get; } Property Value ISharedData SharedModelData Gets an ISharedData instance for accessing shared objects that are associated with the model being processed. public abstract ISharedData SharedModelData { get; } Property Value ISharedData Methods StartTimer(string, TimeSpan, TimerType, TimerHandler) Starts a new timer for the digital twin being created. public abstract TimerActionResult StartTimer(string timerName, TimeSpan interval, TimerType type, TimerHandler timerCallback) Parameters timerName string The timer name. interval TimeSpan The timer interval. type TimerType The type of the timer. timerCallback TimerHandler A delegate representing a user-defined timer callback static method to be executed. Returns TimerActionResult Success if the timer was started successfully, otherwise one of the following error codes is returned: FailedTooManyTimers when the maximum number of timers is reached or FailedInternalError if an error occurred during the method call."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.LogSeverity.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.LogSeverity.html",
    "title": "Enum LogSeverity | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum LogSeverity Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Defines the severity levels for logging messages. public enum LogSeverity Fields Critical = 4 The message corresponds to a critical error that has caused a major failure that requires immediate attention. Error = 3 Indicates that log messages with that level should be treated as an application error. Informational = 1 Indicates that log messages with that level have informational purpose. None = 5 Indicates that log messages with that level should not be stored (e.g. temporarily based on some digital twin configuration setting). Verbose = 0 Used for logging of lengthy messages. Warning = 2 Indicates that log messages with that level are application warnings."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.MessageProcessor-2.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.MessageProcessor-2.html",
    "title": "Class MessageProcessor<TDigitalTwin, TMessage> | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class MessageProcessor<TDigitalTwin, TMessage> Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Abstract base class that must be subclassed to implement the message processor which processes incoming messages for a digital twin object. public abstract class MessageProcessor<TDigitalTwin, TMessage> : MessageProcessor where TDigitalTwin : class Type Parameters TDigitalTwin User-defined type for a digital twin object. TMessage User-defined type for incoming messages. Inheritance object MessageProcessor MessageProcessor<TDigitalTwin, TMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ProcessMessages(ProcessingContext, TDigitalTwin, IEnumerable<TMessage>) This method is called by ScaleOut StreamServer to pass new messages to the specified digital twin object. public abstract ProcessingResult ProcessMessages(ProcessingContext context, TDigitalTwin digitalTwin, IEnumerable<TMessage> newMessages) Parameters context ProcessingContext The digital twin message processing context. digitalTwin TDigitalTwin The target digital twin object. newMessages IEnumerable<TMessage> New messages to process. Returns ProcessingResult DoUpdate when the digital twin object and the list of processed messages need to be updated and NoUpdate when no updates are needed."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.MessageProcessor.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.MessageProcessor.html",
    "title": "Class MessageProcessor | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class MessageProcessor Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll The top level abstract base class used by ScaleOut Digital Twin Library. public abstract class MessageProcessor Inheritance object MessageProcessor Derived MessageProcessor<TDigitalTwin, TMessage> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.PersistenceProviderType.html",
    "title": "Enum PersistenceProviderType | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum PersistenceProviderType Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll List of supported persistence providers. public enum PersistenceProviderType Fields [Display(Name = \"Azure Blob Storage\")] AzureBlobStorage = 2 Azure Blob Storage service (future release). [Display(Name = \"Azure Digital Twins Service\")] AzureDigitalTwinsService = 1 Azure Digital Twins. [Display(Name = \"CosmosDB\")] CosmosDb = 6 CosmosDB [Display(Name = \"DynamoDB\")] DynamoDb = 5 DynamoDB [Display(Name = \"SQLServer\")] SQLServer = 3 SQL Server [Display(Name = \"SQLite\")] SQLite = 4 SQLite [Display(Name = \"Unspecified\")] Unspecified = 0 Unspecified (when model does not use any persistence provider)."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.ProcessingContext.html",
    "title": "Class ProcessingContext | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class ProcessingContext Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Message processing context for currently processing messages. It allows sending messages back to a data source where the messages are originated from. public abstract class ProcessingContext Inheritance object ProcessingContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AnomalyDetectionProviders Returns the collection of registered anomaly detection providers the model has access to. public abstract Dictionary<string, IAnomalyDetectionProvider> AnomalyDetectionProviders { get; } Property Value Dictionary<string, IAnomalyDetectionProvider> DataSourceId Data source unique identifier, e.g. for IoT use case it is typically device Id, which is also used as a digital twin Id. public abstract string DataSourceId { get; } Property Value string DigitalTwinModel Digital twin model type. public abstract string DigitalTwinModel { get; } Property Value string PersistenceProvider Returns the reference to registered persistence provider the model is using. The name of the registered persistence provider should be specified in the model's appsettings.json file via the PersistenceProvider key. Only Azure Digital Twins Service provider is supported. public abstract IPersistenceProvider PersistenceProvider { get; } Property Value IPersistenceProvider The registered IPersistenceProvider used by the model. SharedGlobalData Gets an ISharedData instance for accessing objects that are shared globally between all models. public abstract ISharedData SharedGlobalData { get; } Property Value ISharedData SharedModelData Gets an ISharedData instance for accessing shared objects that are associated with the model being processed. public abstract ISharedData SharedModelData { get; } Property Value ISharedData SimulationController Returns the ISimulationController interface to control all aspects of model simulation. public abstract ISimulationController SimulationController { get; } Property Value ISimulationController Get the ISimulationController interface. Methods GetCurrentTime() Returns the current time in UTC. If model simulation is active the method returns the current simulation time, otherwise it returns the current UTC time. public abstract DateTimeOffset GetCurrentTime() Returns DateTimeOffset The current time - either the current system time or the current simulation time if simulation process is active. LogMessage(LogSeverity, string) Logs user message with the specified severity level. public abstract void LogMessage(LogSeverity severity, string message) Parameters severity LogSeverity The severity level for the specified message. message string The user message to log. SendAlert(string, AlertMessage) Sends an alert to a given Alerting provider. public abstract SendingResult SendAlert(string providerName, AlertMessage alertMessage) Parameters providerName string The name of the configuration of an Alerting Provider to send the alert to. alertMessage AlertMessage The provided object contains information about the alert data, as well as the provider to target. Returns SendingResult SendToDataSource(byte[]) Sends a message back to a data source origination point (e.g. IoT device). When sending a message to the ScaleOut Messaging REST service as a data source, the message content must be JSON encoded. public abstract SendingResult SendToDataSource(byte[] message) Parameters message byte[] JSON encoded message as byte[]. Returns SendingResult Enqueued when message was successfully enqueued, NotHandled otherwise. SendToDataSource(IEnumerable<byte[]>) Sends a list of messages back to a data source origination point (e.g. IoT device). When sending messages to the ScaleOut Messaging REST service as a data source, each message must be JSON encoded. public abstract SendingResult SendToDataSource(IEnumerable<byte[]> messages) Parameters messages IEnumerable<byte[]> JSON encoded messages as a list of byte[]. Returns SendingResult Enqueued when messages were successfully enqueued, NotHandled otherwise. SendToDataSource(IEnumerable<object>) Sends a list of messages back to a data source origination point (e.g. IoT device). When sending messages to the ScaleOut Messaging REST service as a data source, each message must be JSON encoded. public abstract SendingResult SendToDataSource(IEnumerable<object> messages) Parameters messages IEnumerable<object> Message object to be encoded as JSON. Returns SendingResult Enqueued when messages were successfully enqueued, NotHandled otherwise. SendToDataSource(object) Sends a message back to a data source origination point (e.g. IoT device). When sending a message to the ScaleOut Messaging REST service as a data source, the message content must be JSON encoded. public abstract SendingResult SendToDataSource(object message) Parameters message object Message object to be encoded as JSON. Returns SendingResult Enqueued when message was successfully enqueued, NotHandled otherwise. SendToTwin(string, string, byte[]) Sends message to a different digital twin in twin's hierarchy. public abstract SendingResult SendToTwin(string targetTwinModel, string targetTwinId, byte[] message) Parameters targetTwinModel string Digital twin model type. targetTwinId string Digital twin identifier. message byte[] JSON encoded message as byte[]. Returns SendingResult Enqueued when message was successfully enqueued, NotHandled otherwise. SendToTwin(string, string, IEnumerable<byte[]>) Sends a list of messages to a different digital twin in twin's hierarchy. public abstract SendingResult SendToTwin(string targetTwinModel, string targetTwinId, IEnumerable<byte[]> messages) Parameters targetTwinModel string Digital twin model type. targetTwinId string Digital twin identifier. messages IEnumerable<byte[]> JSON encoded messages as a list of byte[]. Returns SendingResult Enqueued when messages were successfully enqueued, NotHandled otherwise. SendToTwin(string, string, IEnumerable<object>) Sends a list of messages to a different digital twin in twin's hierarchy. public abstract SendingResult SendToTwin(string targetTwinModel, string targetTwinId, IEnumerable<object> messages) Parameters targetTwinModel string Digital twin model type. targetTwinId string Digital twin identifier. messages IEnumerable<object> Messages to be encoded as JSON. Returns SendingResult Enqueued when messages were successfully enqueued, NotHandled otherwise. SendToTwin(string, string, object) Sends message to a different digital twin in twin's hierarchy. public abstract SendingResult SendToTwin(string targetTwinModel, string targetTwinId, object message) Parameters targetTwinModel string Digital twin model type. targetTwinId string Digital twin identifier. message object Message object to be encoded as JSON. Returns SendingResult Enqueued when message was successfully enqueued, NotHandled otherwise. StartTimer(string, TimeSpan, TimerType, TimerHandler) Starts a new timer for the digital twin DataSourceId. public abstract TimerActionResult StartTimer(string timerName, TimeSpan interval, TimerType type, TimerHandler timerCallback) Parameters timerName string The timer name. interval TimeSpan The timer interval. type TimerType The type of the timer. timerCallback TimerHandler A delegate representing a user-defined timer callback static method to be executed. Returns TimerActionResult Success if the timer was started successfully, otherwise one of the following error codes is returned: FailedTooManyTimers when the maximum number of timers is reached or FailedInternalError if an error occurred during the method call. StopTimer(string) Stops the specified timer. public abstract TimerActionResult StopTimer(string timerName) Parameters timerName string The timer name. Returns TimerActionResult Success if the timer was stopped successfully, otherwise one of the following error codes is returned: FailedNoSuchTimer when the specified timer was not found or FailedInternalError if an error occurred during the method call."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.ProcessingResult.html",
    "title": "Enum ProcessingResult | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum ProcessingResult Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Specifies whether or not a Digital Twin should be updated after a call to a ProcessMessages(ProcessingContext, TDigitalTwin, IEnumerable<TMessage>) implementation has returned. public enum ProcessingResult Fields DoUpdate = 0 The digital twin object has been modified and must be updated in the ScaleOut service. NoUpdate = 1 The digital twin object was not modified and does not need to be updated in the ScaleOut service."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.SendingResult.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.SendingResult.html",
    "title": "Enum SendingResult | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum SendingResult Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Indicates the status of a Send(string, string, IEnumerable<byte[]>) operation when sending messages to or from a digital twin object. public enum SendingResult Fields Enqueued = 2 The messages were successfully enqueued for delivery. Handled = 0 The messages were sent and processed successfully. NotHandled = 1 An error occurred while sending or processing messages by a digital twin object or data source."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor-1.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor-1.html",
    "title": "Class SimulationProcessor<TDigitalTwin> | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class SimulationProcessor<TDigitalTwin> Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Abstract base class for logic that gets triggered for every time interval in a simulation. public abstract class SimulationProcessor<TDigitalTwin> : SimulationProcessor where TDigitalTwin : class Type Parameters TDigitalTwin User-defined type for a digital twin object. Inheritance object SimulationProcessor SimulationProcessor<TDigitalTwin> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ProcessModel(ProcessingContext, TDigitalTwin, DateTimeOffset) The method called by the ScaleOut service every time the simulation time interval has elapsed. public abstract ProcessingResult ProcessModel(ProcessingContext context, TDigitalTwin digitalTwin, DateTimeOffset currentTime) Parameters context ProcessingContext Digital twin model processing context. digitalTwin TDigitalTwin Targeted digital twin instance. currentTime DateTimeOffset The current simulation time. Returns ProcessingResult DoUpdate if the digital twin object needs to be updated, or NoUpdate if no updates are needed."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.SimulationProcessor.html",
    "title": "Class SimulationProcessor | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class SimulationProcessor Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Abstract base class used by ScaleOut Digital Twin Library infrastructure. public abstract class SimulationProcessor Inheritance object SimulationProcessor Derived SimulationProcessor<TDigitalTwin> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.TimerActionResult.html",
    "title": "Enum TimerActionResult | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum TimerActionResult Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Defines result codes for timer methods. public enum TimerActionResult Fields FailedInternalError = 4 Failed to start/stop timer due to an internal error. FailedNoSuchTimer = 2 Failed to stop the existing timer: the timer is no longer active. FailedTimerAlreadyExists = 3 Failed to start the timer: the timer with the specified name already exists. FailedTooManyTimers = 1 Failed to start a new timer due to reaching the limit for a number of active timers. Success = 0 The operation completed successfully."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.TimerHandler.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.TimerHandler.html",
    "title": "Delegate TimerHandler | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Delegate TimerHandler Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Digital twin timer delegate. Must be assigned to either a public static method or a class instance method. public delegate ProcessingResult TimerHandler(string timerName, DigitalTwinBase instance, ProcessingContext context) Parameters timerName string The timer name. instance DigitalTwinBase The target digital twin object. context ProcessingContext The digital twin message processing context. Returns ProcessingResult Return DoUpdate to indicate that the digital twin object data was modified so the digital twin needs to be saved. Return NoUpdate if the twin object was not modified and does not need to be saved. Remarks Each digital twin instance can have up to 5 timers that can be started via the StartTimer(string, TimeSpan, TimerType, TimerHandler) method call."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.TimerMetadata.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.TimerMetadata.html",
    "title": "Class TimerMetadata | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Class TimerMetadata Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Used by the DigitalTwinBase class to store information about a timer associated with a Digital Twin instance. [Serializable] public sealed class TimerMetadata Inheritance object TimerMetadata Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Id The timer Id. public int Id { get; set; } Property Value int Interval The timer interval. public TimeSpan Interval { get; set; } Property Value TimeSpan TimerHandler The timer handler. Only assign a public static method or a class instance method to this property. public TimerHandler TimerHandler { get; set; } Property Value TimerHandler Type The timer type. public TimerType Type { get; set; } Property Value TimerType"
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.TimerType.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.TimerType.html",
    "title": "Enum TimerType | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Enum TimerType Namespace Scaleout.Streaming.DigitalTwin.Core Assembly ScaleOut.Streaming.DigitalTwin.Core.dll Defines the type of timer that can be created by StartTimer(string, TimeSpan, TimerType, TimerHandler). public enum TimerType Fields OneTime = 1 The timer is fired once after the specified time interval is elapsed. Recurring = 0 The timer is fired periodically with the specified interval until the StopTimer(string) is called."
  },
  "api/Scaleout.Streaming.DigitalTwin.Core.html": {
    "href": "api/Scaleout.Streaming.DigitalTwin.Core.html",
    "title": "Namespace Scaleout.Streaming.DigitalTwin.Core | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Namespace Scaleout.Streaming.DigitalTwin.Core Classes AlertMessage The AlertMessage objects contain all the data to send alerts to external services. This includes properties such as title, message and severity. Finally, alerts can include snapshots of instance properties along with the message. AlertProviderType Holds the different types of Alerting providers supported in the system. DelegateSerializationConverter Serializes a dictionary of user defined timer handlers/delegates. DigitalTwinBase All digital twin objects must be subclassed from this DigitalTwinBase abstract base class to be integrated into the ScaleOut StreamServer message processing pipeline. DigitalTwinTimerMessage Defines a timer message for data exchange between the timer's object expiration handler and the corresponding digital twin instance itself. InitContext Context object that provides operations that are available when a digital twin instance is being created. MessageProcessor The top level abstract base class used by ScaleOut Digital Twin Library. MessageProcessor<TDigitalTwin, TMessage> Abstract base class that must be subclassed to implement the message processor which processes incoming messages for a digital twin object. ProcessingContext Message processing context for currently processing messages. It allows sending messages back to a data source where the messages are originated from. SimulationProcessor Abstract base class used by ScaleOut Digital Twin Library infrastructure. SimulationProcessor<TDigitalTwin> Abstract base class for logic that gets triggered for every time interval in a simulation. TimerMetadata Used by the DigitalTwinBase class to store information about a timer associated with a Digital Twin instance. Interfaces IAnomalyDetectionProvider Encapsulates the capabilities of a ScaleOut real-time digital twin anomaly detection provider (based on ML.NET libraries). ICacheResult Represents a response from an ISharedData operation. IDigitalTwinModelEndpoint Interface for use by client applications that send messages to digital twin instances. IMessageListFactory Creates collection of new messages received by a digital twin object. IMessageSender Interface that must be implemented by a message sender class for sending messages/events to a digital twin. IPersistenceProvider Encapsulates the capabilities of a ScaleOut real-time digital twin persistence provider. ISharedData Provides access to objects that are shared between model instances. ISimulationController The methods of this interface allow user to control all aspects of digital twin's model simulation process. Enums CacheOperationStatus An enumeration that indicates the outcome of a cache operation. LogSeverity Defines the severity levels for logging messages. PersistenceProviderType List of supported persistence providers. ProcessingResult Specifies whether or not a Digital Twin should be updated after a call to a ProcessMessages(ProcessingContext, TDigitalTwin, IEnumerable<TMessage>) implementation has returned. SendingResult Indicates the status of a Send(string, string, IEnumerable<byte[]>) operation when sending messages to or from a digital twin object. TimerActionResult Defines result codes for timer methods. TimerType Defines the type of timer that can be created by StartTimer(string, TimeSpan, TimerType, TimerHandler). Delegates TimerHandler Digital twin timer delegate. Must be assigned to either a public static method or a class instance method."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "Add your introductions here!"
  },
  "index.html": {
    "href": "index.html",
    "title": "ScaleOut Digital Twins™ .NET API Reference | ScaleOut Digital Twins&trade; .NET API Reference",
    "keywords": "ScaleOut Digital Twins™ .NET API Reference This site provides reference documentation for types in the open source Scaleout.Streaming.DigitalTwin.Core and Scaleout.DigitalTwin.Workbench packages."
  }
}